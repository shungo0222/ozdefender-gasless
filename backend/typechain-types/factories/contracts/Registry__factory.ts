/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Registry, RegistryInterface } from "../../contracts/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERC2771Forwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "names",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "owners",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516106dc3803806106dc83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516106446100986000396000818160bd0152818161011f015261030d01526106446000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632b1fd9951461005c578063572b6c05146100ad5780635cf3d346146100fd5780637da0a8771461011d578063f2c298be14610143575b600080fd5b61009061006a366004610371565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed6100bb366004610422565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016100a4565b61011061010b366004610422565b610158565b6040516100a49190610476565b7f0000000000000000000000000000000000000000000000000000000000000000610090565b610156610151366004610371565b6101f2565b005b60006020819052908152604090208054610171906104a9565b80601f016020809104026020016040519081016040528092919081815260200182805461019d906104a9565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b505050505081565b60006001600160a01b031660018260405161020d91906104e3565b908152604051908190036020019020546001600160a01b0316146102645760405162461bcd60e51b815260206004820152600a6024820152692730b6b2903a30b5b2b760b11b604482015260640160405180910390fd5b600061026e610309565b90508060018360405161028191906104e3565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b03948516179055918316600090815290819052206102c3838261054e565b50806001600160a01b03167fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132836040516102fd9190610476565b60405180910390a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633148015610344575060143610155b15610356575060131936013560601c90565b503390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561038357600080fd5b813567ffffffffffffffff8082111561039b57600080fd5b818401915084601f8301126103af57600080fd5b8135818111156103c1576103c161035b565b604051601f8201601f19908116603f011681019083821181831017156103e9576103e961035b565b8160405282815287602084870101111561040257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561043457600080fd5b81356001600160a01b038116811461044b57600080fd5b9392505050565b60005b8381101561046d578181015183820152602001610455565b50506000910152565b6020815260008251806020840152610495816040850160208701610452565b601f01601f19169190910160400192915050565b600181811c908216806104bd57607f821691505b6020821081036104dd57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516104f5818460208701610452565b9190910192915050565b601f82111561054957600081815260208120601f850160051c810160208610156105265750805b601f850160051c820191505b8181101561054557828155600101610532565b5050505b505050565b815167ffffffffffffffff8111156105685761056861035b565b61057c8161057684546104a9565b846104ff565b602080601f8311600181146105b157600084156105995750858301515b600019600386901b1c1916600185901b178555610545565b600085815260208120601f198616915b828110156105e0578886015182559484019460019091019084016105c1565b50858210156105fe5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220459ecb768e3c8907a2c752f3e665513d89c70e65dd24cbcf6b72f3512dd8b83464736f6c63430008140033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Registry> {
    return super.deploy(forwarder, overrides || {}) as Promise<Registry>;
  }
  override getDeployTransaction(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  override connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
